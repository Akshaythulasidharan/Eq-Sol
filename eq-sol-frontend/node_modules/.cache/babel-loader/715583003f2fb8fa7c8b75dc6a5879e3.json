{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\desktop\\\\Eq-sol\\\\eq-sol-frontend\\\\src\\\\Upload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport UploadCrop from './UploadCrop';\nimport Logo from './images/camera.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Upload() {\n  _s();\n\n  const [uploadImg, SetImg] = useState(0);\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n\n      reader.onerror = () => console.log('file reading has failed');\n\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        SetImg(reader.result);\n        var blob = new Blob([arrayBufferView], {\n          type: \"image/jpeg\"\n        });\n        var urlCreator = window.URL || window.webkitURL;\n        SetImg(urlCreator.createObjectURL(blob));\n      };\n\n      reader.readAsArrayBuffer(file);\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ModalBody, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: \"50px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n        className: \"upload-container\",\n        style: {\n          display: \"table\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: \"20px\",\n            verticalAlign: \"middle\",\n            display: \"table-cell\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-center\",\n            style: {\n              color: \"#626566\"\n            },\n            children: \"Drag 'n' drop some files here, or click to select files\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: uploadImg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 7\n          }, this), console.log(uploadImg)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: \"50px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Upload, \"qTPGztJ9EOz7y5QNcpB1ffphTes=\", false, function () {\n  return [useDropzone];\n});\n\n_c = Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"sources":["C:/Users/Acer/desktop/Eq-sol/eq-sol-frontend/src/Upload.js"],"names":["React","useCallback","useState","useDropzone","Button","Modal","ModalHeader","ModalBody","ModalFooter","UploadCrop","Logo","Upload","uploadImg","SetImg","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","result","blob","Blob","arrayBufferView","type","urlCreator","window","URL","webkitURL","createObjectURL","readAsArrayBuffer","getRootProps","getInputProps","height","display","fontSize","verticalAlign","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,QAA5B,QAA2C,OAA3C;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,SAArC,EAAgDC,WAAhD,QAAmE,YAAnE;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;;AAIA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC7B,QAAM,CAACC,SAAD,EAAWC,MAAX,IAAqBX,QAAQ,CAAC,CAAD,CAAnC;AACA,QAAMY,MAAM,GAAGb,WAAW,CAAEc,aAAD,IAAmB;AAC1CA,IAAAA,aAAa,CAACC,OAAd,CAAuBC,IAAD,IAAU;AAC9B,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,MAAAA,MAAM,CAACE,OAAP,GAAiB,MAAMC,OAAO,CAACC,GAAR,CAAY,0BAAZ,CAAvB;;AACAJ,MAAAA,MAAM,CAACK,OAAP,GAAiB,MAAMF,OAAO,CAACC,GAAR,CAAY,yBAAZ,CAAvB;;AACAJ,MAAAA,MAAM,CAACM,MAAP,GAAgB,MAAM;AACtB;AACAX,QAAAA,MAAM,CAACK,MAAM,CAACO,MAAR,CAAN;AACA,YAAIC,IAAI,GAAG,IAAIC,IAAJ,CAAU,CAAEC,eAAF,CAAV,EAA+B;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAA/B,CAAX;AACA,YAAIC,UAAU,GAAGC,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,SAAtC;AACApB,QAAAA,MAAM,CAACiB,UAAU,CAACI,eAAX,CAA4BR,IAA5B,CAAD,CAAN;AAGC,OARD;;AASAR,MAAAA,MAAM,CAACiB,iBAAP,CAAyBlB,IAAzB;AACD,KAfD;AAiBD,GAlBuB,EAkBrB,EAlBqB,CAA1B;AAmBE,QAAM;AAAEmB,IAAAA,YAAF;AAAiBC,IAAAA;AAAjB,MAAkClC,WAAW,CAAC;AAACW,IAAAA;AAAD,GAAD,CAAnD;AAGF,sBAGE;AAAA,2BAEA,QAAC,SAAD;AAAA,8BACE;AAAK,QAAA,KAAK,EAAE;AAACwB,UAAAA,MAAM,EAAC;AAAR;AAAZ;AAAA;AAAA;AAAA;AAAA,cADF,eAEA,oBAASF,YAAY,EAArB;AAAyB,QAAA,SAAS,EAAC,kBAAnC;AAAsD,QAAA,KAAK,EAAE;AAACG,UAAAA,OAAO,EAAE;AAAV,SAA7D;AAAA,gCACA,sBAAWF,aAAa;AAAxB;AAAA;AAAA;AAAA;AAAA,gBADA,eAGA;AAAK,UAAA,KAAK,EAAE;AAACG,YAAAA,QAAQ,EAAC,MAAV;AAAiBC,YAAAA,aAAa,EAAC,QAA/B;AAAwCF,YAAAA,OAAO,EAAE;AAAjD,WAAZ;AAAA,kCACA;AAAG,YAAA,SAAS,EAAC,aAAb;AAA2B,YAAA,KAAK,EAAE;AAACG,cAAAA,KAAK,EAAC;AAAP,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA;AAAK,YAAA,GAAG,EAAE9B;AAAV;AAAA;AAAA;AAAA;AAAA,kBAFA,EAGCS,OAAO,CAACC,GAAR,CAAYV,SAAZ,CAHD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA,eAWA;AAAK,QAAA,KAAK,EAAE;AAAC0B,UAAAA,MAAM,EAAC;AAAR;AAAZ;AAAA;AAAA;AAAA;AAAA,cAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,UAHF;AAqBH;;GA7CuB3B,M;UAqBsBR,W;;;KArBtBQ,M","sourcesContent":["import React, {useCallback, useState} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport UploadCrop from './UploadCrop';\r\nimport Logo from './images/camera.png'\r\n\r\n\r\n\r\nexport default function Upload() {\r\n    const [uploadImg,SetImg] = useState(0);\r\n    const onDrop = useCallback((acceptedFiles) => {\r\n        acceptedFiles.forEach((file) => {\r\n          const reader = new FileReader()\r\n    \r\n          reader.onabort = () => console.log('file reading was aborted')\r\n          reader.onerror = () => console.log('file reading has failed')\r\n          reader.onload = () => {\r\n          // Do whatever you want with the file contents\r\n          SetImg(reader.result)\r\n          var blob = new Blob( [ arrayBufferView ], { type: \"image/jpeg\" } );\r\n          var urlCreator = window.URL || window.webkitURL;\r\n          SetImg(urlCreator.createObjectURL( blob ))\r\n            \r\n\r\n          }\r\n          reader.readAsArrayBuffer(file)\r\n        })\r\n        \r\n      }, [])\r\n      const { getRootProps , getInputProps} = useDropzone({onDrop})\r\n    \r\n      \r\n    return (\r\n        \r\n\r\n      <div >\r\n        \r\n      <ModalBody>\r\n        <div style={{height:\"50px\"}} ></div>\r\n      <div {...getRootProps()} className=\"upload-container\" style={{display: \"table\"}}>\r\n      <input {...getInputProps()}  />\r\n      \r\n      <div style={{fontSize:\"20px\",verticalAlign:\"middle\",display: \"table-cell\"}} >\r\n      <p className=\"text-center\" style={{color:\"#626566\"}}>Drag 'n' drop some files here, or click to select files</p>\r\n      <img src={uploadImg} />\r\n      {console.log(uploadImg)}\r\n      </div>\r\n      </div>\r\n      <div style={{height:\"50px\"}} ></div>\r\n      </ModalBody>\r\n      \r\n      </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}