{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\desktop\\\\Eq-sol\\\\eq-sol-frontend\\\\src\\\\Upload.js\",\n    _s = $RefreshSig$();\n\n//here it provides space to drag and drop image file, also click and upload the file\n//Here we use react-dropzone module for this.\n//after drag and drop of image, navigated to ImageCrop component, visit ImageCrop.js\n//This is done using if, when no image, shows drop image, if image uploaded, shows ImageCrop where we send\n//image to that component.\nimport React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { ModalBody } from 'reactstrap';\nimport ImageCrop from './ImageCrop';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Upload() {\n  _s();\n\n  const [uploadImg, SetImg] = useState(0);\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n\n      reader.onerror = () => console.log('file reading has failed');\n\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        var blob = new Blob([reader.result], {\n          type: \"image/jpeg\"\n        });\n        var urlCreator = window.URL || window.webkitURL;\n        SetImg(urlCreator.createObjectURL(blob));\n      };\n\n      reader.readAsArrayBuffer(file);\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop\n  });\n\n  var first = /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n    className: \"upload-container\",\n    style: {\n      display: \"table\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: \"20px\",\n        verticalAlign: \"middle\",\n        display: \"table-cell\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center\",\n        style: {\n          color: \"#626566\"\n        },\n        children: \"Drag 'n' drop some files here, or click to select files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n\n  var second = /*#__PURE__*/_jsxDEV(ImageCrop, {\n    image: uploadImg,\n    btn: \"Upload another Pic\",\n    toggle: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 17\n  }, this);\n\n  var render;\n\n  if (uploadImg) {\n    render = second;\n  } else {\n    render = first;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ModalBody, {\n      children: render\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Upload, \"qTPGztJ9EOz7y5QNcpB1ffphTes=\", false, function () {\n  return [useDropzone];\n});\n\n_c = Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"sources":["C:/Users/Acer/desktop/Eq-sol/eq-sol-frontend/src/Upload.js"],"names":["React","useCallback","useState","useDropzone","ModalBody","ImageCrop","Upload","uploadImg","SetImg","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","blob","Blob","result","type","urlCreator","window","URL","webkitURL","createObjectURL","readAsArrayBuffer","getRootProps","getInputProps","first","display","fontSize","verticalAlign","color","second","render"],"mappings":";;;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,QAA5B,QAA2C,OAA3C;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,SAAR,QAAwB,YAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAE/B,QAAM,CAACC,SAAD,EAAWC,MAAX,IAAqBN,QAAQ,CAAC,CAAD,CAAnC;AAEA,QAAMO,MAAM,GAAGR,WAAW,CAAES,aAAD,IAAmB;AAE5CA,IAAAA,aAAa,CAACC,OAAd,CAAuBC,IAAD,IAAU;AAC9B,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,MAAAA,MAAM,CAACE,OAAP,GAAiB,MAAMC,OAAO,CAACC,GAAR,CAAY,0BAAZ,CAAvB;;AACAJ,MAAAA,MAAM,CAACK,OAAP,GAAiB,MAAMF,OAAO,CAACC,GAAR,CAAY,yBAAZ,CAAvB;;AACAJ,MAAAA,MAAM,CAACM,MAAP,GAAgB,MAAM;AACpB;AACA,YAAIC,IAAI,GAAG,IAAIC,IAAJ,CAAU,CAAER,MAAM,CAACS,MAAT,CAAV,EAA6B;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAA7B,CAAX;AACA,YAAIC,UAAU,GAAGC,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,SAAtC;AACAnB,QAAAA,MAAM,CAACgB,UAAU,CAACI,eAAX,CAA4BR,IAA5B,CAAD,CAAN;AACD,OALD;;AAMAP,MAAAA,MAAM,CAACgB,iBAAP,CAAyBjB,IAAzB;AACD,KAXD;AAaD,GAfyB,EAevB,EAfuB,CAA1B;AAiBA,QAAM;AAAEkB,IAAAA,YAAF;AAAiBC,IAAAA;AAAjB,MAAkC5B,WAAW,CAAC;AAACM,IAAAA;AAAD,GAAD,CAAnD;;AACA,MAAIuB,KAAK,gBACP,oBAASF,YAAY,EAArB;AAAyB,IAAA,SAAS,EAAC,kBAAnC;AAAsD,IAAA,KAAK,EAAE;AAACG,MAAAA,OAAO,EAAE;AAAV,KAA7D;AAAA,4BACE,sBAAWF,aAAa;AAAxB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,KAAK,EAAE;AAACG,QAAAA,QAAQ,EAAC,MAAV;AAAiBC,QAAAA,aAAa,EAAC,QAA/B;AAAwCF,QAAAA,OAAO,EAAE;AAAjD,OAAZ;AAAA,6BACE;AAAG,QAAA,SAAS,EAAC,aAAb;AAA2B,QAAA,KAAK,EAAE;AAACG,UAAAA,KAAK,EAAC;AAAP,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAQA,MAAIC,MAAM,gBAAI,QAAC,SAAD;AAAW,IAAA,KAAK,EAAE9B,SAAlB;AAA6B,IAAA,GAAG,EAAC,oBAAjC;AAAsD,IAAA,MAAM,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA,UAAd;;AACA,MAAI+B,MAAJ;;AAEA,MAAG/B,SAAH,EAAa;AACX+B,IAAAA,MAAM,GAAGD,MAAT;AACD,GAFD,MAEO;AACLC,IAAAA,MAAM,GAAGN,KAAT;AACD;;AAED,sBACE;AAAA,2BACE,QAAC,SAAD;AAAA,gBACKM;AADL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA9CuBhC,M;UAqBkBH,W;;;KArBlBG,M","sourcesContent":["\r\n//here it provides space to drag and drop image file, also click and upload the file\r\n//Here we use react-dropzone module for this.\r\n//after drag and drop of image, navigated to ImageCrop component, visit ImageCrop.js\r\n//This is done using if, when no image, shows drop image, if image uploaded, shows ImageCrop where we send\r\n//image to that component.\r\nimport React, {useCallback, useState} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport {ModalBody} from 'reactstrap';\r\nimport ImageCrop from './ImageCrop';\r\n\r\nexport default function Upload() {\r\n\r\n  const [uploadImg,SetImg] = useState(0);\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n\r\n    acceptedFiles.forEach((file) => {\r\n      const reader = new FileReader()\r\n      reader.onabort = () => console.log('file reading was aborted')\r\n      reader.onerror = () => console.log('file reading has failed')\r\n      reader.onload = () => {\r\n        // Do whatever you want with the file contents\r\n        var blob = new Blob( [ reader.result ], { type: \"image/jpeg\" } );\r\n        var urlCreator = window.URL || window.webkitURL;\r\n        SetImg(urlCreator.createObjectURL( blob ))\r\n      }\r\n      reader.readAsArrayBuffer(file)\r\n    })\r\n\r\n  }, []);\r\n\r\n  const { getRootProps , getInputProps} = useDropzone({onDrop})\r\n  var first =\r\n    <div {...getRootProps()} className=\"upload-container\" style={{display: \"table\"}}>\r\n      <input {...getInputProps()}  />\r\n      <div style={{fontSize:\"20px\",verticalAlign:\"middle\",display: \"table-cell\"}} >\r\n        <p className=\"text-center\" style={{color:\"#626566\"}}>Drag 'n' drop some files here, or click to select files</p>\r\n      </div>\r\n    </div>\r\n  ;  \r\n  var second  = <ImageCrop image={uploadImg} btn=\"Upload another Pic\" toggle=\"/\" />\r\n  var render;\r\n\r\n  if(uploadImg){\r\n    render = second;\r\n  } else {\r\n    render = first;\r\n  }\r\n\r\n  return (\r\n    <div >\r\n      <ModalBody>\r\n          {render}\r\n      </ModalBody>\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}