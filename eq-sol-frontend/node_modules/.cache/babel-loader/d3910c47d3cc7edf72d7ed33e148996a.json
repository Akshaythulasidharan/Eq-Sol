{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\desktop\\\\Eq-sol\\\\eq-sol-frontend\\\\src\\\\UploadCrop.js\";\nimport React, { Component } from 'react';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport ReactCrop from 'react-image-crop';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class UploadCrop extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      src: null,\n      crop: {}\n    };\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    };\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg');\n    });\n  }\n\n  render() {\n    const {\n      crop,\n      croppedImageUrl,\n      src\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(ReactCrop, {\n          src: this.props.image,\n          crop: crop,\n          className: \"img-fluid\",\n          ruleOfThirds: true,\n          onImageLoaded: this.onImageLoaded,\n          onComplete: this.onCropComplete,\n          onChange: this.onCropChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-4\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/home\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-home\",\n              style: {\n                margin: \"20px\"\n              },\n              children: \"Upload another pic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 38\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/answer\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-home\",\n              style: {\n                margin: \"20px\"\n              },\n              children: \"Proceed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 40\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Acer/desktop/Eq-sol/eq-sol-frontend/src/UploadCrop.js"],"names":["React","Component","ReactCrop","Link","UploadCrop","state","src","crop","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","onCropChange","percentCrop","width","height","croppedImageUrl","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","render","props","margin"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport ReactCrop from 'react-image-crop';\r\nimport { Link } from 'react-router-dom';\r\n \r\nexport default class UploadCrop extends Component {\r\n\r\n    state = {\r\n        src: null,\r\n        crop: {\r\n          \r\n        },\r\n    };\r\n\r\n    onSelectFile = e => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n          const reader = new FileReader();\r\n          reader.addEventListener('load', () =>\r\n            this.setState({ src: reader.result })\r\n          );\r\n          reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n      };\r\n    \r\n      // If you setState the crop in here you should return false.\r\n      onImageLoaded = image => {\r\n        this.imageRef = image;\r\n      };\r\n    \r\n      onCropComplete = crop => {\r\n        this.makeClientCrop(crop);\r\n      };\r\n    \r\n      onCropChange = (crop, percentCrop) => {\r\n        // You could also use percentCrop:\r\n        // this.setState({ crop: percentCrop });\r\n        this.setState({ crop });\r\n      };\r\n    \r\n      async makeClientCrop(crop) {\r\n        if (this.imageRef && crop.width && crop.height) {\r\n          const croppedImageUrl = await this.getCroppedImg(\r\n            this.imageRef,\r\n            crop,\r\n            'newFile.jpeg'\r\n          );\r\n          this.setState({ croppedImageUrl });\r\n        }\r\n      }\r\n    \r\n      getCroppedImg(image, crop, fileName) {\r\n        const canvas = document.createElement('canvas');\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n        const ctx = canvas.getContext('2d');\r\n    \r\n        ctx.drawImage(\r\n          image,\r\n          crop.x * scaleX,\r\n          crop.y * scaleY,\r\n          crop.width * scaleX,\r\n          crop.height * scaleY,\r\n          0,\r\n          0,\r\n          crop.width,\r\n          crop.height\r\n        );\r\n    \r\n        return new Promise((resolve, reject) => {\r\n          canvas.toBlob(blob => {\r\n            if (!blob) {\r\n              //reject(new Error('Canvas is empty'));\r\n              console.error('Canvas is empty');\r\n              return;\r\n            }\r\n            blob.name = fileName;\r\n            window.URL.revokeObjectURL(this.fileUrl);\r\n            this.fileUrl = window.URL.createObjectURL(blob);\r\n            resolve(this.fileUrl);\r\n          }, 'image/jpeg');\r\n        });\r\n      }\r\n\r\n\r\n    render() {\r\n        const { crop, croppedImageUrl, src } = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                <ReactCrop src={this.props.image} crop={crop} className=\"img-fluid\" ruleOfThirds\r\n                onImageLoaded={this.onImageLoaded}\r\n                onComplete={this.onCropComplete}\r\n                onChange={this.onCropChange} />\r\n                {/* <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} /> */}\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-4\">\r\n                    <Link to=\"/home\"><button className=\"btn btn-home\" style={{margin:\"20px\"}} >Upload another pic</button> </Link>\r\n                    <Link to=\"/answer\"><button className=\"btn btn-home\" style={{margin:\"20px\"}} >Proceed</button> </Link>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}