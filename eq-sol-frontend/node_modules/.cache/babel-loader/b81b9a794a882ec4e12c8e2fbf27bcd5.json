{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\desktop\\\\Eq-sol\\\\eq-sol-frontend\\\\src\\\\ApiFetcher.js\",\n    _s = $RefreshSig$();\n\n//here comes the main phase, where the cropped image from ImageCrop, via Upload or Camera component is passed to backend\\\n//We use REST API technology where we using post method call an API using a link from backend and with it send Image.\n//the reply would contain answers we needed, it is converted to string form and pass all the answers to Answer Component\n//which displays answer, visit Answer.js\nimport React, { useEffect, useState } from 'react';\nimport Answer from './Answer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ApiFetcher(props) {\n  _s();\n\n  const [EqnImg, SetEqnImg] = useState(0);\n  const [error, Seterror] = useState(0);\n  const [isLoaded, SetisLoaded] = useState(false);\n  var Ans = {\n    Eqn: \"5x + 3 = 23\",\n    TypeEqn: \"Linear Equation\",\n    EqnAns: \"x = 4\"\n  }; // 'https://jsonplaceholder.typicode.com/todos/1'\n\n  useEffect(() => {\n    SetEqnImg(props.location.state.image);\n    fetch('https://jsonplaceholder.typic').then(res => res.json()).then(result => {\n      SetisLoaded(true);\n    }, error => {\n      Seterror(error);\n    });\n  });\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" container text-center home-heading\",\n      style: {\n        marginTop: \"50px\",\n        fontStyle: \"bold\"\n      },\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 16\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Answer, {\n        Ans: Ans\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ApiFetcher, \"tv9OYAetO4ljPFx3blFCCk9LPuM=\");\n\n_c = ApiFetcher;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiFetcher\");","map":{"version":3,"sources":["C:/Users/Acer/desktop/Eq-sol/eq-sol-frontend/src/ApiFetcher.js"],"names":["React","useEffect","useState","Answer","ApiFetcher","props","EqnImg","SetEqnImg","error","Seterror","isLoaded","SetisLoaded","Ans","Eqn","TypeEqn","EqnAns","location","state","image","fetch","then","res","json","result","marginTop","fontStyle","message"],"mappings":";;;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAEtC,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBL,QAAQ,CAAC,CAAD,CAAnC;AACA,QAAM,CAACM,KAAD,EAAOC,QAAP,IAAmBP,QAAQ,CAAC,CAAD,CAAjC;AACA,QAAM,CAACQ,QAAD,EAAUC,WAAV,IAAyBT,QAAQ,CAAC,KAAD,CAAvC;AAEA,MAAIU,GAAG,GAAG;AACNC,IAAAA,GAAG,EAAC,aADE;AAENC,IAAAA,OAAO,EAAC,iBAFF;AAGNC,IAAAA,MAAM,EAAC;AAHD,GAAV,CANsC,CAYtC;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,SAAS,CAACF,KAAK,CAACW,QAAN,CAAeC,KAAf,CAAqBC,KAAtB,CAAT;AACAC,IAAAA,KAAK,CAAC,+BAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVZ,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KALL,EAMKH,KAAD,IAAW;AACPC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KARL;AAWH,GAbQ,CAAT;;AAeA,MAAIA,KAAJ,EAAW;AACP,wBAAO;AAAK,MAAA,SAAS,EAAC,qCAAf;AAAqD,MAAA,KAAK,EAAE;AAACgB,QAAAA,SAAS,EAAC,MAAX;AAAkBC,QAAAA,SAAS,EAAC;AAA5B,OAA5D;AAAA,4BAAyGjB,KAAK,CAACkB,OAA/G;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFH,MAES,IAAI,CAAChB,QAAL,EAAe;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA;AACL,wBACI;AAAA,6BAEI,QAAC,MAAD;AAAQ,QAAA,GAAG,EAAEE;AAAb;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAMD;AAIN;;GA3CuBR,U;;KAAAA,U","sourcesContent":["\r\n//here comes the main phase, where the cropped image from ImageCrop, via Upload or Camera component is passed to backend\\\r\n//We use REST API technology where we using post method call an API using a link from backend and with it send Image.\r\n//the reply would contain answers we needed, it is converted to string form and pass all the answers to Answer Component\r\n//which displays answer, visit Answer.js\r\nimport React, {useEffect, useState } from 'react'\r\nimport Answer from './Answer';\r\n\r\nexport default function ApiFetcher(props) {\r\n\r\n    const [EqnImg,SetEqnImg] = useState(0);\r\n    const [error,Seterror] = useState(0);\r\n    const [isLoaded,SetisLoaded] = useState(false);\r\n    \r\n    var Ans = {\r\n        Eqn:\"5x + 3 = 23\",\r\n        TypeEqn:\"Linear Equation\",\r\n        EqnAns:\"x = 4\"\r\n    }\r\n\r\n    // 'https://jsonplaceholder.typicode.com/todos/1'\r\n    useEffect(() => {\r\n        SetEqnImg(props.location.state.image)\r\n        fetch('https://jsonplaceholder.typic')\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n              SetisLoaded(true);\r\n            },\r\n            (error) => {\r\n                Seterror(error);\r\n            }\r\n          )\r\n          \r\n    });\r\n\r\n    if (error) {\r\n        return <div className=\" container text-center home-heading\" style={{marginTop:\"50px\",fontStyle:\"bold\"}}>Error: {error.message}</div>;\r\n      } else if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n      } else {\r\n        return (\r\n            <div>\r\n                {/* <img src={EqnImg}/> */}\r\n                <Answer Ans={Ans}/>\r\n                </div>\r\n        );\r\n      }\r\n    \r\n\r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module"}