{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\desktop\\\\Eq-sol\\\\eq-sol-frontend\\\\src\\\\ApiFetcher.js\";\nimport React from 'react';\nimport Answer from './Answer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction arrayBufferToBase64(buffer) {\n  let binary = '';\n  let bytes = new Uint8Array(buffer);\n  let len = bytes.byteLength;\n\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n\n  return window.btoa(binary);\n}\n\nexport default function ApiFetcher(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Answer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n}\n_c = ApiFetcher;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiFetcher\");","map":{"version":3,"sources":["C:/Users/Acer/desktop/Eq-sol/eq-sol-frontend/src/ApiFetcher.js"],"names":["React","Answer","arrayBufferToBase64","buffer","binary","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","window","btoa","ApiFetcher","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,SAASC,mBAAT,CAA6BC,MAA7B,EAAqC;AACjC,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,MAAf,CAAZ;AACA,MAAII,GAAG,GAAGF,KAAK,CAACG,UAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC1BL,IAAAA,MAAM,IAAIM,MAAM,CAACC,YAAP,CAAoBN,KAAK,CAACI,CAAD,CAAzB,CAAV;AACH;;AACD,SAAOG,MAAM,CAACC,IAAP,CAAYT,MAAZ,CAAP;AACD;;AAEH,eAAe,SAASU,UAAT,CAAoBC,KAApB,EAA2B;AACtC,sBACI;AAAA,2BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;KANuBD,U","sourcesContent":["import React from 'react'\r\nimport Answer from './Answer';\r\n\r\nfunction arrayBufferToBase64(buffer) {\r\n    let binary = '';\r\n    let bytes = new Uint8Array(buffer);\r\n    let len = bytes.byteLength;\r\n    for (let i = 0; i < len; i++) {\r\n        binary += String.fromCharCode(bytes[i]);\r\n    }\r\n    return window.btoa(binary);\r\n  }\r\n\r\nexport default function ApiFetcher(props) {\r\n    return (\r\n        <div>\r\n            <Answer/>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}