{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\desktop\\\\Eq-sol\\\\eq-sol-frontend\\\\src\\\\ImageCrop.js\";\n//here it does is, displays image like normal img we get from props, we can drag over the image in any aspect rectangle and crop the image.\n//Here we use react-image-crop module for this, also ReactCrop.css to style the crop box\n//after selecting, the cropped image is sent to ApiFetcher Component when we click proceed btn, visit ApiFetcher.js\nimport React, { Component } from 'react';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport ReactCrop from 'react-image-crop';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ImageCrop extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      src: null,\n      crop: {}\n    };\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    };\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    const base64Image = canvas.toDataURL('image/png');\n    return base64Image; // return new Promise((resolve, reject) => {\n    //   canvas.toBlob(blob => {\n    //     if (!blob) {\n    //       //reject(new Error('Canvas is empty'));\n    //       console.error('Canvas is empty');\n    //       return;\n    //     }\n    //     blob.name = fileName;\n    //     window.URL.revokeObjectURL(this.fileUrl);\n    //     this.fileUrl = window.URL.createObjectURL(blob);\n    //     resolve(this.fileUrl);\n    //   }, 'image/jpeg');\n    // });\n  }\n\n  render() {\n    const {\n      crop,\n      croppedImageUrl,\n      src\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: \"25px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center \",\n        children: \"Drag over the image to crop the respective equation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(ReactCrop, {\n          src: this.props.image,\n          crop: crop,\n          className: \"img-fluid crop-image\",\n          ruleOfThirds: true,\n          onImageLoaded: this.onImageLoaded,\n          onComplete: this.onCropComplete,\n          onChange: this.onCropChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [console.log(this.props.link), /*#__PURE__*/_jsxDEV(Link, {\n            onClick: this.props.toggle,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-home\",\n              style: {\n                margin: \"0px\"\n              },\n              children: this.props.btn\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 45\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: {\n              pathname: \"/answer\",\n              state: {\n                image: croppedImageUrl\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-home\",\n              style: {\n                margin: \"20px\"\n              },\n              children: \"Proceed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Acer/desktop/Eq-sol/eq-sol-frontend/src/ImageCrop.js"],"names":["React","Component","ReactCrop","Link","ImageCrop","state","src","crop","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","onCropChange","percentCrop","width","height","croppedImageUrl","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","base64Image","toDataURL","render","props","console","log","link","toggle","margin","btn","pathname"],"mappings":";AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,qCAAP;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,eAAe,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAC/CI,KAD+C,GACvC;AACNC,MAAAA,GAAG,EAAE,IADC;AAENC,MAAAA,IAAI,EAAE;AAFA,KADuC;;AAAA,SAQ/CC,YAR+C,GAQhCC,CAAC,IAAI;AAClB,UAAIA,CAAC,CAACC,MAAF,CAASC,KAAT,IAAkBF,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwB,CAA9C,EAAiD;AAC/C,cAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,QAAAA,MAAM,CAACE,gBAAP,CAAwB,MAAxB,EAAgC,MAC9B,KAAKC,QAAL,CAAc;AAAEV,UAAAA,GAAG,EAAEO,MAAM,CAACI;AAAd,SAAd,CADF;AAGAJ,QAAAA,MAAM,CAACK,aAAP,CAAqBT,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAArB;AACD;AACF,KAhB8C;;AAAA,SAmB/CQ,aAnB+C,GAmB/BC,KAAK,IAAI;AACvB,WAAKC,QAAL,GAAgBD,KAAhB;AACD,KArB8C;;AAAA,SAuB/CE,cAvB+C,GAuB9Bf,IAAI,IAAI;AACvB,WAAKgB,cAAL,CAAoBhB,IAApB;AACD,KAzB8C;;AAAA,SA2B/CiB,YA3B+C,GA2BhC,CAACjB,IAAD,EAAOkB,WAAP,KAAuB;AACpC;AACA;AACA,WAAKT,QAAL,CAAc;AAAET,QAAAA;AAAF,OAAd;AACD,KA/B8C;AAAA;;AAiC3B,QAAdgB,cAAc,CAAChB,IAAD,EAAO;AACzB,QAAI,KAAKc,QAAL,IAAiBd,IAAI,CAACmB,KAAtB,IAA+BnB,IAAI,CAACoB,MAAxC,EAAgD;AAC9C,YAAMC,eAAe,GAAG,MAAM,KAAKC,aAAL,CAC5B,KAAKR,QADuB,EAE5Bd,IAF4B,EAG5B,cAH4B,CAA9B;AAKA,WAAKS,QAAL,CAAc;AAAEY,QAAAA;AAAF,OAAd;AACD;AACF;;AAEDC,EAAAA,aAAa,CAACT,KAAD,EAAQb,IAAR,EAAcuB,QAAd,EAAwB;AACnC,UAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,UAAMC,MAAM,GAAGd,KAAK,CAACe,YAAN,GAAqBf,KAAK,CAACM,KAA1C;AACA,UAAMU,MAAM,GAAGhB,KAAK,CAACiB,aAAN,GAAsBjB,KAAK,CAACO,MAA3C;AACAI,IAAAA,MAAM,CAACL,KAAP,GAAenB,IAAI,CAACmB,KAApB;AACAK,IAAAA,MAAM,CAACJ,MAAP,GAAgBpB,IAAI,CAACoB,MAArB;AACA,UAAMW,GAAG,GAAGP,MAAM,CAACQ,UAAP,CAAkB,IAAlB,CAAZ;AAEAD,IAAAA,GAAG,CAACE,SAAJ,CACEpB,KADF,EAEEb,IAAI,CAACkC,CAAL,GAASP,MAFX,EAGE3B,IAAI,CAACmC,CAAL,GAASN,MAHX,EAIE7B,IAAI,CAACmB,KAAL,GAAaQ,MAJf,EAKE3B,IAAI,CAACoB,MAAL,GAAcS,MALhB,EAME,CANF,EAOE,CAPF,EAQE7B,IAAI,CAACmB,KARP,EASEnB,IAAI,CAACoB,MATP;AAYA,UAAMgB,WAAW,GAAGZ,MAAM,CAACa,SAAP,CAAiB,WAAjB,CAApB;AACA,WAAOD,WAAP,CArBmC,CAuBnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEtC,MAAAA,IAAF;AAAQqB,MAAAA,eAAR;AAAyBtB,MAAAA;AAAzB,QAAiC,KAAKD,KAA5C;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAK,QAAA,KAAK,EAAE;AAACsB,UAAAA,MAAM,EAAC;AAAR;AAAZ;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAG,QAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE,QAAC,SAAD;AAAW,UAAA,GAAG,EAAE,KAAKmB,KAAL,CAAW1B,KAA3B;AAAkC,UAAA,IAAI,EAAEb,IAAxC;AAA8C,UAAA,SAAS,EAAC,sBAAxD;AAA+E,UAAA,YAAY,MAA3F;AACE,UAAA,aAAa,EAAE,KAAKY,aADtB;AAEE,UAAA,UAAU,EAAE,KAAKG,cAFnB;AAGE,UAAA,QAAQ,EAAE,KAAKE;AAHjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAHF,eAUA;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA,+BACE;AAAA,qBACGuB,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAL,CAAWG,IAAvB,CADH,eAEE,QAAC,IAAD;AAAM,YAAA,OAAO,EAAE,KAAKH,KAAL,CAAWI,MAA1B;AAAA,oCAAkC;AAAQ,cAAA,SAAS,EAAC,cAAlB;AAAiC,cAAA,KAAK,EAAE;AAACC,gBAAAA,MAAM,EAAC;AAAR,eAAxC;AAAA,wBAA0D,KAAKL,KAAL,CAAWM;AAArE;AAAA;AAAA;AAAA;AAAA,oBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAIE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAE;AACRC,cAAAA,QAAQ,EAAC,SADD;AAERhD,cAAAA,KAAK,EAAE;AACLe,gBAAAA,KAAK,EAACQ;AADD;AAFC,aAAV;AAAA,mCAME;AAAQ,cAAA,SAAS,EAAC,cAAlB;AAAiC,cAAA,KAAK,EAAE;AAACuB,gBAAAA,MAAM,EAAC;AAAR,eAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAVA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA4BD;;AAhH8C","sourcesContent":["\r\n//here it does is, displays image like normal img we get from props, we can drag over the image in any aspect rectangle and crop the image.\r\n//Here we use react-image-crop module for this, also ReactCrop.css to style the crop box\r\n//after selecting, the cropped image is sent to ApiFetcher Component when we click proceed btn, visit ApiFetcher.js\r\nimport React, {Component} from 'react'\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport ReactCrop from 'react-image-crop';\r\nimport { Link } from 'react-router-dom';\r\n \r\nexport default class ImageCrop extends Component {\r\n  state = {\r\n    src: null,\r\n    crop: {\r\n    },\r\n  };\r\n\r\n  //below is code for crop image activation\r\n  onSelectFile = e => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.addEventListener('load', () =>\r\n        this.setState({ src: reader.result })\r\n      );\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n  };\r\n    \r\n  // If you setState the crop in here you should return false.\r\n  onImageLoaded = image => {\r\n    this.imageRef = image;\r\n  };\r\n    \r\n  onCropComplete = crop => {\r\n    this.makeClientCrop(crop);\r\n  };\r\n    \r\n  onCropChange = (crop, percentCrop) => {\r\n    // You could also use percentCrop:\r\n    // this.setState({ crop: percentCrop });\r\n    this.setState({ crop });\r\n  };\r\n    \r\n  async makeClientCrop(crop) {\r\n    if (this.imageRef && crop.width && crop.height) {\r\n      const croppedImageUrl = await this.getCroppedImg(\r\n        this.imageRef,\r\n        crop,\r\n        'newFile.jpeg'\r\n      );\r\n      this.setState({ croppedImageUrl });\r\n    }\r\n  }\r\n    \r\n  getCroppedImg(image, crop, fileName) {\r\n    const canvas = document.createElement('canvas');\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    canvas.width = crop.width;\r\n    canvas.height = crop.height;\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n\r\n    const base64Image = canvas.toDataURL('image/png');\r\n    return base64Image\r\n\r\n    // return new Promise((resolve, reject) => {\r\n    //   canvas.toBlob(blob => {\r\n    //     if (!blob) {\r\n    //       //reject(new Error('Canvas is empty'));\r\n    //       console.error('Canvas is empty');\r\n    //       return;\r\n    //     }\r\n    //     blob.name = fileName;\r\n    //     window.URL.revokeObjectURL(this.fileUrl);\r\n    //     this.fileUrl = window.URL.createObjectURL(blob);\r\n    //     resolve(this.fileUrl);\r\n    //   }, 'image/jpeg');\r\n    // });\r\n  }\r\n\r\n  render() {\r\n    const { crop, croppedImageUrl, src } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <div style={{height:\"25px\"}} ></div>\r\n        <p className=\"text-center \">Drag over the image to crop the respective equation.</p>\r\n        <div className=\"row\">\r\n          <ReactCrop src={this.props.image} crop={crop} className=\"img-fluid crop-image\" ruleOfThirds\r\n            onImageLoaded={this.onImageLoaded}\r\n            onComplete={this.onCropComplete}\r\n            onChange={this.onCropChange} \r\n          />\r\n      </div>\r\n      <div className=\"row justify-content-center\">\r\n        <div >\r\n          {console.log(this.props.link)}\r\n          <Link onClick={this.props.toggle}><button className=\"btn btn-home\" style={{margin:\"0px\"}} >{this.props.btn}</button> </Link>\r\n          {/* here we pass the image to the API Fetcher component */}\r\n          <Link to={{\r\n            pathname:\"/answer\",\r\n            state: {\r\n              image:croppedImageUrl\r\n            }\r\n          }}>\r\n            <button className=\"btn btn-home\" style={{margin:\"20px\"}} >Proceed</button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}