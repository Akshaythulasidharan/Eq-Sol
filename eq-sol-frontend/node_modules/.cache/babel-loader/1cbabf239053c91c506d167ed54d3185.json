{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\desktop\\\\Eq-sol\\\\eq-sol-frontend\\\\src\\\\Upload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport UploadCrop from './UploadCrop';\nimport Logo from './images/camera.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Upload() {\n  _s();\n\n  const [uploadImg, SetImg] = useState(0);\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n\n      reader.onerror = () => console.log('file reading has failed');\n\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        var blob = new Blob([reader.result], {\n          type: \"image/jpeg\"\n        });\n        var urlCreator = window.URL || window.webkitURL;\n        SetImg(urlCreator.createObjectURL(blob));\n      };\n\n      reader.readAsArrayBuffer(file);\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop\n  });\n\n  var first = /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n    className: \"upload-container\",\n    style: {\n      display: \"table\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: \"20px\",\n        verticalAlign: \"middle\",\n        display: \"table-cell\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center\",\n        style: {\n          color: \"#626566\"\n        },\n        children: \"Drag 'n' drop some files here, or click to select files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 19\n  }, this);\n\n  var second = /*#__PURE__*/_jsxDEV(\"img\", {\n    src: uploadImg,\n    className: \"img-fluid\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 21\n  }, this);\n\n  var render;\n\n  if (uploadImg) {\n    render = second;\n  } else {\n    render = first;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ModalBody, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: \"50px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), render, /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: \"50px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Upload, \"qTPGztJ9EOz7y5QNcpB1ffphTes=\", false, function () {\n  return [useDropzone];\n});\n\n_c = Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"sources":["C:/Users/Acer/desktop/Eq-sol/eq-sol-frontend/src/Upload.js"],"names":["React","useCallback","useState","useDropzone","Button","Modal","ModalHeader","ModalBody","ModalFooter","UploadCrop","Logo","Upload","uploadImg","SetImg","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","blob","Blob","result","type","urlCreator","window","URL","webkitURL","createObjectURL","readAsArrayBuffer","getRootProps","getInputProps","first","display","fontSize","verticalAlign","color","second","render","height"],"mappings":"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","sourcesContent":["import React, {useCallback, useState} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport UploadCrop from './UploadCrop';\r\nimport Logo from './images/camera.png'\r\n\r\n\r\n\r\nexport default function Upload() {\r\n    const [uploadImg,SetImg] = useState(0);\r\n    const onDrop = useCallback((acceptedFiles) => {\r\n        acceptedFiles.forEach((file) => {\r\n          const reader = new FileReader()\r\n    \r\n          reader.onabort = () => console.log('file reading was aborted')\r\n          reader.onerror = () => console.log('file reading has failed')\r\n          reader.onload = () => {\r\n          // Do whatever you want with the file contents\r\n          \r\n          var blob = new Blob( [ reader.result ], { type: \"image/jpeg\" } );\r\n          var urlCreator = window.URL || window.webkitURL;\r\n          SetImg(urlCreator.createObjectURL( blob ))\r\n            \r\n\r\n          }\r\n          reader.readAsArrayBuffer(file)\r\n        })\r\n        \r\n      }, [])\r\n      const { getRootProps , getInputProps} = useDropzone({onDrop})\r\n    \r\n      var first = <div {...getRootProps()} className=\"upload-container\" style={{display: \"table\"}}>\r\n      <input {...getInputProps()}  />\r\n      \r\n      <div style={{fontSize:\"20px\",verticalAlign:\"middle\",display: \"table-cell\"}} >\r\n      <p className=\"text-center\" style={{color:\"#626566\"}}>Drag 'n' drop some files here, or click to select files</p>\r\n      \r\n      </div>\r\n      </div> ;\r\n\r\n      var second  = <img src={uploadImg} className=\"img-fluid\"/>\r\n\r\n      var render;\r\n\r\n      if(uploadImg){\r\n        render = second;\r\n      } else {\r\n        render = first;\r\n      }\r\n\r\n    return (\r\n        \r\n\r\n      <div >\r\n        \r\n      <ModalBody>\r\n        <div style={{height:\"50px\"}} ></div>\r\n        {render}\r\n      {/* <div {...getRootProps()} className=\"upload-container\" style={{display: \"table\"}}>\r\n      <input {...getInputProps()}  />\r\n      \r\n      <div style={{fontSize:\"20px\",verticalAlign:\"middle\",display: \"table-cell\"}} >\r\n      <p className=\"text-center\" style={{color:\"#626566\"}}>Drag 'n' drop some files here, or click to select files</p>\r\n      \r\n      </div>\r\n      </div> */}\r\n      <div style={{height:\"50px\"}} ></div>\r\n      </ModalBody>\r\n      \r\n      </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}